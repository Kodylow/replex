use std::str::FromStr;
use std::time::Duration;

use anyhow::Result;
use axum::extract::{Path, Query, State};
use axum::http::StatusCode;
use axum::Json;
use futures::StreamExt;
use multimint::fedimint_client::oplog::UpdateStreamOrOutcome;
use multimint::fedimint_client::ClientHandleArc;
use multimint::fedimint_core::config::FederationId;
use multimint::fedimint_core::task::spawn;
use multimint::fedimint_core::Amount;
use multimint::fedimint_ln_client::{LightningClientModule, LnReceiveState};
use multimint::fedimint_ln_common::lightning_invoice::{Bolt11InvoiceDescription, Description};
use multimint::fedimint_mint_client::MintClientModule;
use serde::{Deserialize, Serialize};
use tracing::{error, info};
use url::Url;

use super::LnurlStatus;
use crate::config::CONFIG;
use crate::error::AppError;
use crate::model::app_user::{AppUser, AppUserBmc};
use crate::model::invoice::{InvoiceBmc, InvoiceForCreate, InvoiceState};
use crate::model::ModelManager;
use crate::state::AppState;
use crate::utils::empty_string_as_none;

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LnurlCallbackParams {
    pub amount: u64, // User specified amount in MilliSatoshi
    #[serde(default, deserialize_with = "empty_string_as_none")]
    pub nonce: Option<String>, // Optional parameter used to prevent server response caching
    #[serde(default, deserialize_with = "empty_string_as_none")]
    pub comment: Option<String>, /* Optional parameter to pass the LN WALLET user's comment to
                      * LN SERVICE */
    #[serde(default, deserialize_with = "empty_string_as_none")]
    pub proofofpayer: Option<String>, // Optional ephemeral secp256k1 public key generated by payer
    #[serde(default, deserialize_with = "empty_string_as_none")]
    pub nostr: Option<String>, // Optional zap request
}

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LnurlCallbackSuccessAction {
    pub tag: String,
    pub message: String,
}

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LnurlCallbackResponse {
    pub status: LnurlStatus,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    pub pr: String, // BOLT11 invoice
    pub verify: Url,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub success_action: Option<LnurlCallbackSuccessAction>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<String>>,
}

const MIN_AMOUNT: u64 = 1000;

#[axum_macros::debug_handler]
pub async fn handle_callback(
    Path(username): Path<String>,
    Query(params): Query<LnurlCallbackParams>,
    State(state): State<AppState>,
) -> Result<Json<LnurlCallbackResponse>, AppError> {
    info!("callback called with username: {}", username);
    if params.amount < MIN_AMOUNT {
        return Err(AppError {
            error: anyhow::anyhow!("Amount < MIN_AMOUNT"),
            status: StatusCode::BAD_REQUEST,
        });
    }

    let user = AppUserBmc::get_by_name(&state.mm, &username).await?;
    let federation_id = FederationId::from_str(&user.federation_id).map_err(|e| {
        AppError::new(
            StatusCode::BAD_REQUEST,
            anyhow::anyhow!("Invalid federation_id for user {}: {}", user.name, e),
        )
    })?;

    let locked_clients = state.fm.clients.lock().await.clone();
    let client = locked_clients.get(&federation_id).ok_or_else(|| {
        AppError::new(
            StatusCode::BAD_REQUEST,
            anyhow::anyhow!("FederationId not found in multimint map"),
        )
    })?;

    let ln = client.get_first_module::<LightningClientModule>();

    let (op_id, pr, _) = ln
        .create_bolt11_invoice_for_user_tweaked(
            Amount {
                msats: params.amount,
            },
            Bolt11InvoiceDescription::Direct(&Description::new(
                params
                    .comment
                    .unwrap_or("hermes address payment".to_string()),
            )?),
            None,
            (),
            None,
        )
        .await?;

    // insert invoice into db for later verification
    let id = InvoiceBmc::create(
        &state.mm,
        InvoiceForCreate {
            op_id: op_id.fmt_full().to_string(),
            federation_id: user.federation_id.clone(),
            app_user_id: user.id,
            amount: params.amount as i64,
            bolt11: pr.to_string(),
        },
    )
    .await?;

    // create subscription to operation
    let subscription = ln
        .subscribe_ln_receive(op_id)
        .await
        .expect("subscribing to a just created operation can't fail");

    spawn_invoice_subscription(state, id, user, subscription).await;

    let verify_url = format!(
        "http://{}:{}/lnurlp/{}/verify/{}",
        CONFIG.domain,
        CONFIG.port,
        username,
        op_id.fmt_full().to_string()
    );

    let res = LnurlCallbackResponse {
        pr: pr.to_string(),
        success_action: None,
        status: LnurlStatus::Ok,
        reason: None,
        verify: verify_url.parse()?,
        routes: Some(vec![]),
    };

    Ok(Json(res))
}

pub(crate) async fn spawn_invoice_subscription(
    state: AppState,
    id: i32,
    user: AppUser,
    subscription: UpdateStreamOrOutcome<LnReceiveState>,
) {
    spawn("waiting for invoice being paid", async move {
        let locked_clients = state.fm.clients.lock().await;
        let client = locked_clients
            .get(&FederationId::from_str(&user.federation_id).unwrap())
            .unwrap();
        let mut stream = subscription.into_stream();
        while let Some(op_state) = stream.next().await {
            match op_state {
                LnReceiveState::Canceled { reason } => {
                    error!("Payment canceled, reason: {:?}", reason);
                    InvoiceBmc::set_state(&state.mm, id, InvoiceState::Cancelled)
                        .await
                        .expect("settling invoice can't fail");
                    break;
                }
                LnReceiveState::Claimed => {
                    info!("Payment claimed");
                    let invoice = InvoiceBmc::set_state(&state.mm, id, InvoiceState::Settled)
                        .await
                        .expect("settling invoice can't fail");
                    notify_user(client, &state.mm, id, invoice.amount as u64, user.clone())
                        .await
                        .expect("notifying user can't fail");
                    break;
                }
                _ => {}
            }
        }
    });
}

async fn notify_user(
    client: &ClientHandleArc,
    mm: &ModelManager,
    id: i32,
    amount: u64,
    user: AppUser,
) -> Result<(), Box<dyn std::error::Error>> {
    let mint = client.get_first_module::<MintClientModule>();
    let (operation_id, notes) = mint
        .spend_notes(
            Amount::from_msats(amount),
            Duration::from_secs(604800),
            false,
            (),
        )
        .await?;

    todo!()
}
